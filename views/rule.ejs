linebacker = {
  // Baseline offset tweak
  baselineOffset: 0,
  
  //Whether to draw the lines behind or in front of the page
  behind: true,
  
  // Line thickness in pixels
  lineThickness: 1,
  
  // Line style
  lineStyle: "rgba(0, 0, 0, 0.1)",
  
  // Internal
  canvas: null,
  lineHeight: null,
  
  drawCanvas: function() {
    if(this.canvas) return;
    
    var body = document.getElementsByTagName('body')[0];
    var computedStyle = getComputedStyle(body, '');

    var fontSize = Number(computedStyle.fontSize.match(/(\d+)px/)[1]);
    this.lineHeight = fontSize;

    if(computedStyle.lineHeight.match(/(\d+)px/)) {
      this.lineHeight = Number(computedStyle.lineHeight.match(/(\d+)px/)[1]);
    }
    
    // Set up the canvas to stretch across the page
    this.canvas    = document.createElement('canvas');
    this.canvas.height = body.scrollHeight;
    this.canvas.width  = body.scrollWidth; 
    this.canvas.style.position = 'absolute';
    this.canvas.style.top  = 0;
    this.canvas.style.left = 0;
    
     if(this.behind) {
      // TODO: create a first element if none exists
      var firstElement = body.childNodes[0];
      body.insertBefore(this.canvas, firstElement);
    } else {
      body.appendChild(this.canvas);
    }
    
    console.log('[Linebacker] Font size:', fontSize + 'px, line height:', this.lineHeight + 'px, drawing', (this.behind ? 'behind' : 'in front'));
  },
  
  rule: function() {
    this.drawCanvas();
    
    var ctx = this.canvas.getContext('2d');
    ctx.fillStyle = this.lineStyle;
  
    // Clear the canvas
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    
    // Rule the lines
    var y = 0 + this.baselineOffset;
    var step = this.lineHeight;
    
    while(y < this.canvas.height) {
      ctx.fillRect(0, y += step, this.canvas.width, this.lineThickness);
    }
  }
};